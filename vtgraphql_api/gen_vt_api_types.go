
// GENERATED by vt-go-graphql 2017-09-28 23:33:00.823853977 -0700 PDT
package vtgraphql_api

import (
	"context"
    )
type VeritoneGraphQL interface {
	Query_temporalDataObjects(ctx context.Context, requestSpec string /*applicationId string, id string, offset int, limit int, */) (output *TDOList, err error)
	Query_temporalDataObject(ctx context.Context, requestSpec string /*id string, */) (output *TemporalDataObject, err error)
	Query_asset(ctx context.Context, requestSpec string /*id string, */) (output *Asset, err error)
	Query_cloneRequests(ctx context.Context, requestSpec string /*id string, applicationId string, offset int, limit int, */) (output *CloneRequestList, err error)
	Query_engines(ctx context.Context, requestSpec string /*id string, categoryId string, state []EngineState, owned bool, libraryRequired bool, offset int, limit int, */) (output *EngineList, err error)
	Query_engineCategories(ctx context.Context, requestSpec string /*id string, */) (output []EngineCategory, err error)
	Query_jobs(ctx context.Context, requestSpec string /*id string, status []string, offset int, limit int, applicationId string, targetId string, */) (output *JobList, err error)
	Query_entityIdentifierTypes(ctx context.Context, requestSpec string /*id string, offset int, limit int, */) (output *EntityIdentifierTypeList, err error)
	Query_libraryTypes(ctx context.Context, requestSpec string /*id string, offset int, limit int, */) (output *LibraryTypeList, err error)
	Query_libraries(ctx context.Context, requestSpec string /*id string, name string, offset int, limit int, */) (output *LibraryList, err error)
	Query_library(ctx context.Context, requestSpec string /*id string, */) (output *Library, err error)
	Query_entity(ctx context.Context, requestSpec string /*id string, */) (output *Entity, err error)
	Query_applications(ctx context.Context, requestSpec string /*id string, status *ApplicationStatus, offset int, limit int, */) (output *ApplicationList, err error)
	Query_organizations(ctx context.Context, requestSpec string /*id string, offset int, limit int, */) (output *OrganizationList, err error)
	Query_organization(ctx context.Context, requestSpec string /*id string, */) (output *Organization, err error)
	Query_permissions(ctx context.Context, requestSpec string /*id string, name string, offset int, limit int, */) (output *PermissionList, err error)
	Query_users(ctx context.Context, requestSpec string /*id string, name string, organizationIds []string, offset int, limit int, */) (output *UserList, err error)
	Query_user(ctx context.Context, requestSpec string /*id string, */) (output *User, err error)
	Query_me(ctx context.Context, requestSpec string /**/) (output *User, err error)
	Query_groups(ctx context.Context, requestSpec string /*id string, name string, organizationIds []string, offset int, limit int, */) (output *GroupList, err error)
	Query_searchMentions(ctx context.Context, requestSpec string /*search *JSON, */) (output *SearchResult, err error)
	Query_searchMedia(ctx context.Context, requestSpec string /*search *JSON, */) (output *SearchResult, err error)
	Query_folder(ctx context.Context, requestSpec string /*id string, */) (output *Folder, err error)
	Query_task(ctx context.Context, requestSpec string /*id string, */) (output *Task, err error)
	Query_job(ctx context.Context, requestSpec string /*id string, */) (output *Job, err error)
	Query_application(ctx context.Context, requestSpec string /*id string, */) (output *Application, err error)
	Query_ingestionConfiguration(ctx context.Context, requestSpec string /*id string, */) (output *IngestionConfiguration, err error)
	Query_ingestionConfigurations(ctx context.Context, requestSpec string /*id string, offset int, limit int, name string, startDate *DateTime, endDate *DateTime, sources []string, applicationId string, emailAddress string, */) (output *IngestionConfigurationList, err error)
	Query_graphqlServiceInfo(ctx context.Context, requestSpec string /**/) (output *GraphQLServiceInfo, err error)
	Mutation_createTDO(ctx context.Context, requestSpec string /*input *CreateTDO, */) (output *TemporalDataObject, err error)
	Mutation_updateTDO(ctx context.Context, requestSpec string /*input *UpdateTDO, */) (output *TemporalDataObject, err error)
	Mutation_deleteTDO(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_createAsset(ctx context.Context, requestSpec string /*input *CreateAsset, */) (output *Asset, err error)
	Mutation_deleteAsset(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_updateAsset(ctx context.Context, requestSpec string /*asset *UpdateAsset, */) (output *Asset, err error)
	Mutation_requestClone(ctx context.Context, requestSpec string /*input *RequestClone, */) (output *CloneRequest, err error)
	Mutation_createEngine(ctx context.Context, requestSpec string /*input *CreateEngine, */) (output *Engine, err error)
	Mutation_updateEngine(ctx context.Context, requestSpec string /*input *UpdateEngine, */) (output *Engine, err error)
	Mutation_deleteEngine(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_createEngineBuild(ctx context.Context, requestSpec string /*input *CreateBuild, */) (output *Build, err error)
	Mutation_updateEngineBuild(ctx context.Context, requestSpec string /*input *UpdateBuild, */) (output *Build, err error)
	Mutation_deleteEngineBuild(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_updateTask(ctx context.Context, requestSpec string /*input *UpdateTask, */) (output *Task, err error)
	Mutation_pollTask(ctx context.Context, requestSpec string /*input *PollTask, */) (output *Task, err error)
	Mutation_createJob(ctx context.Context, requestSpec string /*input *CreateJob, */) (output *Job, err error)
	Mutation_cancelJob(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_retryJob(ctx context.Context, requestSpec string /*id string, */) (output *Job, err error)
	Mutation_createApplication(ctx context.Context, requestSpec string /*input *CreateApplication, */) (output *Application, err error)
	Mutation_deleteApplication(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_updateApplication(ctx context.Context, requestSpec string /*input *UpdateApplication, */) (output *Application, err error)
	Mutation_createEntityIdentifierType(ctx context.Context, requestSpec string /*input *CreateEntityIdentifierType, */) (output *EntityIdentifierType, err error)
	Mutation_updateEntityIdentifierType(ctx context.Context, requestSpec string /*input *UpdateEntityIdentifierType, */) (output *EntityIdentifierType, err error)
	Mutation_deleteEntityIdentifierType(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_createLibraryType(ctx context.Context, requestSpec string /*input *CreateLibraryType, */) (output *LibraryType, err error)
	Mutation_updateLibraryType(ctx context.Context, requestSpec string /*input *UpdateLibraryType, */) (output *LibraryType, err error)
	Mutation_deleteLibraryType(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_createLibrary(ctx context.Context, requestSpec string /*input *CreateLibrary, */) (output *Library, err error)
	Mutation_updateLibrary(ctx context.Context, requestSpec string /*input *UpdateLibrary, */) (output *Library, err error)
	Mutation_deleteLibrary(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_createEntity(ctx context.Context, requestSpec string /*input *CreateEntity, */) (output *Entity, err error)
	Mutation_updateEntity(ctx context.Context, requestSpec string /*input *UpdateEntity, */) (output *Entity, err error)
	Mutation_deleteEntity(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_createEntityIdentifier(ctx context.Context, requestSpec string /*input *CreateEntityIdentifier, */) (output *EntityIdentifier, err error)
	Mutation_updateEntityIdentifier(ctx context.Context, requestSpec string /*input *UpdateEntityIdentifier, */) (output *EntityIdentifier, err error)
	Mutation_deleteEntityIdentifier(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
	Mutation_applicationWorkflow(ctx context.Context, requestSpec string /*input *ApplicationWorkflow, */) (output *Application, err error)
	Mutation_createIngestionConfiguration(ctx context.Context, requestSpec string /*input *CreateIngestionConfiguration, */) (output *IngestionConfiguration, err error)
	Mutation_updateIngestionConfiguration(ctx context.Context, requestSpec string /*input *UpdateIngestionConfiguration, */) (output *IngestionConfiguration, err error)
	Mutation_deleteIngestionConfiguration(ctx context.Context, requestSpec string /*id string, */) (output *DeletePayload, err error)
}

type TemporalDataObject struct {
	CreatedDateTime  string     `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string     `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	Id               string     `json:"id,omitempty" graphql:"scalar,ID"`
	CreatedBy        string     `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string     `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	Description      string     `json:"description,omitempty" graphql:"scalar,String"`
	Name             string     `json:"name,omitempty" graphql:"scalar,String"`
	MediaId          string     `json:"mediaId,omitempty" graphql:"scalar,ID"`
	Metadata         []Metadata `json:"metadata,omitempty" graphql:"interface,Metadata"`
	Jsondata         *JSON      `json:"jsondata,omitempty" graphql:"scalar,JSON"`
	Assets           *AssetList `json:"assets,omitempty" graphql:"object,AssetList"`
	Security         *Security  `json:"security,omitempty" graphql:"object,Security"`
	StartDateTime    int        `json:"startDateTime,omitempty" graphql:"scalar,Int"`
	StopDateTime     int        `json:"stopDateTime,omitempty" graphql:"scalar,Int"`
	Source           string     `json:"source,omitempty" graphql:"scalar,String"`
	ApplicationId    string     `json:"applicationId,omitempty" graphql:"scalar,ID"`
	Status           string     `json:"status,omitempty" graphql:"scalar,String"`
	Tasks            *TaskList  `json:"tasks,omitempty" graphql:"object,TaskList"`
}
type Task struct {
	Id                string      `json:"id,omitempty" graphql:"scalar,ID"`
	Name              string      `json:"name,omitempty" graphql:"scalar,String"`
	Description       string      `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime   string      `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime  string      `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy         string      `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy        string      `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	QueuedDateTime    string      `json:"queuedDateTime,omitempty" graphql:"scalar,String"`
	CompletedDateTime string      `json:"completedDateTime,omitempty" graphql:"scalar,String"`
	Status            *TaskStatus `json:"status,omitempty" graphql:"enum,TaskStatus"`
	Order             int         `json:"order,omitempty" graphql:"scalar,Int"`
	IsClone           bool        `json:"isClone,omitempty" graphql:"scalar,Boolean"`
	ApplicationId     string      `json:"applicationId,omitempty" graphql:"scalar,String"`
	TargetId          string      `json:"targetId,omitempty" graphql:"scalar,ID"`
	EngineId          string      `json:"engineId,omitempty" graphql:"scalar,ID"`
	JobId             string      `json:"jobId,omitempty" graphql:"scalar,ID"`
	BuildId           string      `json:"buildId,omitempty" graphql:"scalar,ID"`
	SourceAssetId     string      `json:"sourceAssetId,omitempty" graphql:"scalar,ID"`
	MediaLengthSec    int         `json:"mediaLengthSec,omitempty" graphql:"scalar,Int"`
	TaskPayload       *JSON       `json:"taskPayload,omitempty" graphql:"scalar,JSON"`
}
type EngineWhitelist struct {
	OrganizationId   string           `json:"organizationId,omitempty" graphql:"scalar,ID"`
	Engines          []Engine         `json:"engines,omitempty" graphql:"object,Engine"`
	EngineCategories []EngineCategory `json:"engineCategories,omitempty" graphql:"object,EngineCategory"`
}
type UpdateBuild struct {
	Id       string             `json:"id,omitempty" graphql:"scalar,ID"`
	EngineId string             `json:"engineId,omitempty" graphql:"scalar,ID"`
	Action   *BuildUpdateAction `json:"action,omitempty" graphql:"enum,BuildUpdateAction"`
	File     *UploadedFile      `json:"file,omitempty" graphql:"scalar,UploadedFile"`
}
type MentionComment struct {
	Id               string `json:"id,omitempty" graphql:"scalar,ID"`
	Text             string `json:"text,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string `json:"modifiedBy,omitempty" graphql:"scalar,String"`
}
type UpdateTDO struct {
	Id            string `json:"id,omitempty" graphql:"scalar,ID"`
	StartDateTime int    `json:"startDateTime,omitempty" graphql:"scalar,Int"`
	StopDateTime  int    `json:"stopDateTime,omitempty" graphql:"scalar,Int"`
	Source        string `json:"source,omitempty" graphql:"scalar,String"`
	MediaId       string `json:"mediaId,omitempty" graphql:"scalar,ID"`
	Status        string `json:"status,omitempty" graphql:"scalar,String"`
	Name          string `json:"name,omitempty" graphql:"scalar,String"`
	Description   string `json:"description,omitempty" graphql:"scalar,String"`
}
type UpdateEntityIdentifierType struct {
	Id          string                    `json:"id,omitempty" graphql:"scalar,ID"`
	Label       string                    `json:"label,omitempty" graphql:"scalar,String"`
	LabelPlural string                    `json:"labelPlural,omitempty" graphql:"scalar,String"`
	IconClass   string                    `json:"iconClass,omitempty" graphql:"scalar,String"`
	Description string                    `json:"description,omitempty" graphql:"scalar,String"`
	DataType    *EntityIdentifierDataType `json:"dataType,omitempty" graphql:"enum,EntityIdentifierDataType"`
}
type JSONObject struct {
	Name string `json:"name,omitempty" graphql:"scalar,String"`
	Data *JSON  `json:"data,omitempty" graphql:"scalar,JSON"`
}
type KVP struct {
	Name  string     `json:"name,omitempty" graphql:"scalar,String"`
	Value []Property `json:"value,omitempty" graphql:"interface,Property"`
}
type MentionList struct {
	Records     *JSON  `json:"records,omitempty" graphql:"scalar,JSON"`
	SearchToken string `json:"searchToken,omitempty" graphql:"scalar,String"`
	From        int    `json:"from,omitempty" graphql:"scalar,Int"`
	To          int    `json:"to,omitempty" graphql:"scalar,Int"`
}
type Build struct {
	Id               string `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string `json:"name,omitempty" graphql:"scalar,String"`
	Description      string `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	EngineId         string `json:"engineId,omitempty" graphql:"scalar,ID"`
	Price            int    `json:"price,omitempty" graphql:"scalar,Int"`
	ValidateUri      string `json:"validateUri,omitempty" graphql:"scalar,String"`
	ExecuteUri       string `json:"executeUri,omitempty" graphql:"scalar,String"`
	Status           string `json:"status,omitempty" graphql:"scalar,String"`
	DockerImage      string `json:"dockerImage,omitempty" graphql:"scalar,String"`
	Runtime          *JSON  `json:"runtime,omitempty" graphql:"scalar,JSON"`
	Version          string `json:"version,omitempty" graphql:"scalar,String"`
	Report           *JSON  `json:"report,omitempty" graphql:"scalar,JSON"`
}
type EntityIdentifier struct {
	Id               string                `json:"id,omitempty" graphql:"scalar,ID"`
	EntityId         string                `json:"entityId,omitempty" graphql:"scalar,ID"`
	IdentifierType   *EntityIdentifierType `json:"identifierType,omitempty" graphql:"object,EntityIdentifierType"`
	IdentifierTypeId string                `json:"identifierTypeId,omitempty" graphql:"scalar,ID"`
	Title            string                `json:"title,omitempty" graphql:"scalar,String"`
	IsPriority       bool                  `json:"isPriority,omitempty" graphql:"scalar,Boolean"`
	CreatedDateTime  string                `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string                `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	Url              string                `json:"url,omitempty" graphql:"scalar,String"`
	ContentType      string                `json:"contentType,omitempty" graphql:"scalar,String"`
	Jsondata         *JSON                 `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type SearchResult struct {
	Jsondata *JSON `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type UpdateAsset struct {
	Id string `json:"id,omitempty" graphql:"scalar,ID"`
}
type CreateEngine struct {
	IsPublic        bool   `json:"isPublic,omitempty" graphql:"scalar,Boolean"`
	Name            string `json:"name,omitempty" graphql:"scalar,String"`
	Description     string `json:"description,omitempty" graphql:"scalar,String"`
	CategoryId      string `json:"categoryId,omitempty" graphql:"scalar,String"`
	DeploymentModel int    `json:"deploymentModel,omitempty" graphql:"scalar,Int"`
	Price           int    `json:"price,omitempty" graphql:"scalar,Int"`
}
type EntityIdentifierType struct {
	Id          string                    `json:"id,omitempty" graphql:"scalar,ID"`
	Label       string                    `json:"label,omitempty" graphql:"scalar,String"`
	LabelPlural string                    `json:"labelPlural,omitempty" graphql:"scalar,String"`
	IconClass   string                    `json:"iconClass,omitempty" graphql:"scalar,String"`
	Description string                    `json:"description,omitempty" graphql:"scalar,String"`
	DataType    *EntityIdentifierDataType `json:"dataType,omitempty" graphql:"enum,EntityIdentifierDataType"`
}
type LibraryCollaboratorList struct {
	Records []LibraryCollaborator `json:"records,omitempty" graphql:"object,LibraryCollaborator"`
	Offset  int                   `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int                   `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int                   `json:"count,omitempty" graphql:"scalar,Int"`
}
type User struct {
	Name         string          `json:"name,omitempty" graphql:"scalar,String"`
	Id           string          `json:"id,omitempty" graphql:"scalar,ID"`
	Permissions  *PermissionList `json:"permissions,omitempty" graphql:"object,PermissionList"`
	Roles        []Role          `json:"roles,omitempty" graphql:"object,Role"`
	Organization *Organization   `json:"organization,omitempty" graphql:"object,Organization"`
	Jsondata     *JSON           `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type StructuredJSONSchema struct {
	Schema              *JSON         `json:"schema,omitempty" graphql:"scalar,JSON"`
	Name                string        `json:"name,omitempty" graphql:"scalar,String"`
	Id                  string        `json:"id,omitempty" graphql:"scalar,ID"`
	OwnerOrganizationId string        `json:"ownerOrganizationId,omitempty" graphql:"scalar,ID"`
	Organization        *Organization `json:"organization,omitempty" graphql:"object,Organization"`
}
type CloneRequest struct {
	Id                          string `json:"id,omitempty" graphql:"scalar,ID"`
	SourceApplicationId         string `json:"sourceApplicationId,omitempty" graphql:"scalar,ID"`
	DestinationApplicationId    string `json:"destinationApplicationId,omitempty" graphql:"scalar,ID"`
	NumberOfRecordings          int    `json:"numberOfRecordings,omitempty" graphql:"scalar,Int"`
	NumberOfCompletedRecordings int    `json:"numberOfCompletedRecordings,omitempty" graphql:"scalar,Int"`
	CreatedDateTime             string `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime            string `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	Status                      string `json:"status,omitempty" graphql:"scalar,String"`
	Percentage                  int    `json:"percentage,omitempty" graphql:"scalar,Int"`
}
type PollTask struct {
	Id          string `json:"id,omitempty" graphql:"scalar,ID"`
	JobId       string `json:"jobId,omitempty" graphql:"scalar,ID"`
	PollPayload *JSON  `json:"pollPayload,omitempty" graphql:"scalar,JSON"`
}
type UpdateApplication struct {
	Id                  string           `json:"id,omitempty" graphql:"scalar,ID"`
	Name                string           `json:"name,omitempty" graphql:"scalar,String"`
	Category            string           `json:"category,omitempty" graphql:"scalar,String"`
	Description         string           `json:"description,omitempty" graphql:"scalar,String"`
	IconUrl             string           `json:"iconUrl,omitempty" graphql:"scalar,String"`
	IconSvg             string           `json:"iconSvg,omitempty" graphql:"scalar,String"`
	Url                 string           `json:"url,omitempty" graphql:"scalar,String"`
	Oauth2RedirectUrls  []string         `json:"oauth2RedirectUrls,omitempty" graphql:"scalar,String"`
	CheckPermissions    bool             `json:"checkPermissions,omitempty" graphql:"scalar,Boolean"`
	PermissionsRequired []string         `json:"permissionsRequired,omitempty" graphql:"scalar,String"`
	DeploymentModel     *DeploymentModel `json:"deploymentModel,omitempty" graphql:"enum,DeploymentModel"`
}
type CreateLibraryType struct {
	Id                      string            `json:"id,omitempty" graphql:"scalar,ID"`
	Label                   string            `json:"label,omitempty" graphql:"scalar,String"`
	IconClass               string            `json:"iconClass,omitempty" graphql:"scalar,String"`
	EntityIdentifierTypeIds []string          `json:"entityIdentifierTypeIds,omitempty" graphql:"scalar,ID"`
	EntityType              *CreateEntityType `json:"entityType,omitempty" graphql:"input_object,CreateEntityType"`
}
type MentionRating struct {
	Id               string `json:"id,omitempty" graphql:"scalar,ID"`
	Text             string `json:"text,omitempty" graphql:"scalar,String"`
	Rating           int    `json:"rating,omitempty" graphql:"scalar,Int"`
	CreatedDateTime  string `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string `json:"modifiedBy,omitempty" graphql:"scalar,String"`
}
type Asset struct {
	Id               string `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string `json:"name,omitempty" graphql:"scalar,String"`
	ContentType      string `json:"contentType,omitempty" graphql:"scalar,String"`
	Description      string `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	Jsondata         *JSON  `json:"jsondata,omitempty" graphql:"scalar,JSON"`
	ContainerId      string `json:"containerId,omitempty" graphql:"scalar,ID"`
	Uri              string `json:"uri,omitempty" graphql:"scalar,String"`
	AssetType        string `json:"assetType,omitempty" graphql:"scalar,String"`
}
type Security struct {
	Global bool `json:"global,omitempty" graphql:"scalar,Boolean"`
}
type LibraryEngineModelList struct {
	Records []LibraryEngineModel `json:"records,omitempty" graphql:"object,LibraryEngineModel"`
	Offset  int                  `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int                  `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int                  `json:"count,omitempty" graphql:"scalar,Int"`
}
type ApplicationList struct {
	Records []Application `json:"records,omitempty" graphql:"object,Application"`
	Offset  int           `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int           `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int           `json:"count,omitempty" graphql:"scalar,Int"`
}
type IngestionConfigurationList struct {
	Offset  int                      `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int                      `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int                      `json:"count,omitempty" graphql:"scalar,Int"`
	Records []IngestionConfiguration `json:"records,omitempty" graphql:"object,IngestionConfiguration"`
}
type LibraryTypeList struct {
	Offset  int           `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int           `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int           `json:"count,omitempty" graphql:"scalar,Int"`
	Records []LibraryType `json:"records,omitempty" graphql:"object,LibraryType"`
}
type LibraryEngineModel struct {
	Id               string   `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string   `json:"name,omitempty" graphql:"scalar,String"`
	Description      string   `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string   `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string   `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string   `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string   `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	ContainerId      string   `json:"containerId,omitempty" graphql:"scalar,ID"`
	LibraryId        string   `json:"libraryId,omitempty" graphql:"scalar,ID"`
	Library          *Library `json:"library,omitempty" graphql:"object,Library"`
	LibraryVersion   int      `json:"libraryVersion,omitempty" graphql:"scalar,Int"`
	TrainJobId       string   `json:"trainJobId,omitempty" graphql:"scalar,ID"`
	TrainStatus      string   `json:"trainStatus,omitempty" graphql:"scalar,String"`
	DataUrl          string   `json:"dataUrl,omitempty" graphql:"scalar,String"`
	Jsondata         *JSON    `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type Program struct {
	Id        string `json:"id,omitempty" graphql:"scalar,String"`
	Name      string `json:"name,omitempty" graphql:"scalar,String"`
	Image     string `json:"image,omitempty" graphql:"scalar,String"`
	LiveImage string `json:"liveImage,omitempty" graphql:"scalar,String"`
}
type MentionCommentList struct {
	Records []MentionComment `json:"records,omitempty" graphql:"object,MentionComment"`
	Offset  int              `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int              `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int              `json:"count,omitempty" graphql:"scalar,Int"`
}
type LibraryType struct {
	Id                    string                 `json:"id,omitempty" graphql:"scalar,ID"`
	Label                 string                 `json:"label,omitempty" graphql:"scalar,String"`
	IconClass             string                 `json:"iconClass,omitempty" graphql:"scalar,String"`
	EntityIdentifierTypes []EntityIdentifierType `json:"entityIdentifierTypes,omitempty" graphql:"object,EntityIdentifierType"`
	EntityTypeName        string                 `json:"entityTypeName,omitempty" graphql:"scalar,String"`
	EntityTypeNamePlural  string                 `json:"entityTypeNamePlural,omitempty" graphql:"scalar,String"`
	EntityType            *EntityType            `json:"entityType,omitempty" graphql:"object,EntityType"`
}
type Role struct {
	Name        string          `json:"name,omitempty" graphql:"scalar,String"`
	Permissions *PermissionList `json:"permissions,omitempty" graphql:"object,PermissionList"`
	Id          string          `json:"id,omitempty" graphql:"scalar,ID"`
}
type Group struct {
	Id               string        `json:"id,omitempty" graphql:"scalar,ID"`
	CreatedDateTime  string        `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string        `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	ApplicationId    string        `json:"applicationId,omitempty" graphql:"scalar,ID"`
	CreatedBy        *User         `json:"createdBy,omitempty" graphql:"object,User"`
	ModifiedBy       *User         `json:"modifiedBy,omitempty" graphql:"object,User"`
	OrganizationId   string        `json:"organizationId,omitempty" graphql:"scalar,ID"`
	Organization     *Organization `json:"organization,omitempty" graphql:"object,Organization"`
	Jsondata         *JSON         `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type UpdateEntityType struct {
	Name       string `json:"name,omitempty" graphql:"scalar,String"`
	NamePlural string `json:"namePlural,omitempty" graphql:"scalar,String"`
	Schema     *JSON  `json:"schema,omitempty" graphql:"scalar,JSON"`
}
type CreateEntityIdentifier struct {
	EntityId         string        `json:"entityId,omitempty" graphql:"scalar,ID"`
	IdentifierTypeId string        `json:"identifierTypeId,omitempty" graphql:"scalar,ID"`
	Title            string        `json:"title,omitempty" graphql:"scalar,String"`
	IsPriority       bool          `json:"isPriority,omitempty" graphql:"scalar,Boolean"`
	Url              string        `json:"url,omitempty" graphql:"scalar,String"`
	Jsondata         *JSON         `json:"jsondata,omitempty" graphql:"scalar,JSON"`
	ContentType      string        `json:"contentType,omitempty" graphql:"scalar,String"`
	File             *UploadedFile `json:"file,omitempty" graphql:"scalar,UploadedFile"`
}
type ApplicationWorkflow struct {
	Id     string                     `json:"id,omitempty" graphql:"scalar,ID"`
	Action *ApplicationWorkflowAction `json:"action,omitempty" graphql:"enum,ApplicationWorkflowAction"`
}
type EntityIdentifierTypeList struct {
	Records []EntityIdentifierType `json:"records,omitempty" graphql:"object,EntityIdentifierType"`
	Limit   int                    `json:"limit,omitempty" graphql:"scalar,Int"`
	Offset  int                    `json:"offset,omitempty" graphql:"scalar,Int"`
	Count   int                    `json:"count,omitempty" graphql:"scalar,Int"`
}
type LibraryList struct {
	Offset  int       `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int       `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int       `json:"count,omitempty" graphql:"scalar,Int"`
	Records []Library `json:"records,omitempty" graphql:"object,Library"`
}
type GraphQLServiceInfo struct {
	BuildInfo *JSON `json:"buildInfo,omitempty" graphql:"scalar,JSON"`
}
type UpdateIngestionConfiguration struct {
	Id       string `json:"id,omitempty" graphql:"scalar,ID"`
	Type     string `json:"type,omitempty" graphql:"scalar,String"`
	Name     string `json:"name,omitempty" graphql:"scalar,String"`
	Jsondata *JSON  `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type Library struct {
	CreatedDateTime  string                   `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string                   `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	Id               string                   `json:"id,omitempty" graphql:"scalar,ID"`
	CreatedBy        string                   `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string                   `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	Description      string                   `json:"description,omitempty" graphql:"scalar,String"`
	Name             string                   `json:"name,omitempty" graphql:"scalar,String"`
	Properties       []Property               `json:"properties,omitempty" graphql:"interface,Property"`
	Security         *Security                `json:"security,omitempty" graphql:"object,Security"`
	Version          int                      `json:"version,omitempty" graphql:"scalar,Int"`
	OrganizationId   string                   `json:"organizationId,omitempty" graphql:"scalar,ID"`
	LibraryType      *LibraryType             `json:"libraryType,omitempty" graphql:"object,LibraryType"`
	LibraryTypeId    string                   `json:"libraryTypeId,omitempty" graphql:"scalar,ID"`
	CoverImageUrl    string                   `json:"coverImageUrl,omitempty" graphql:"scalar,String"`
	EngineModels     *LibraryEngineModelList  `json:"engineModels,omitempty" graphql:"object,LibraryEngineModelList"`
	Entities         *EntityList              `json:"entities,omitempty" graphql:"object,EntityList"`
	Collaborators    *LibraryCollaboratorList `json:"collaborators,omitempty" graphql:"object,LibraryCollaboratorList"`
}
type Collection struct {
	Id               string        `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string        `json:"name,omitempty" graphql:"scalar,String"`
	ImageUrl         string        `json:"imageUrl,omitempty" graphql:"scalar,String"`
	OwnerId          string        `json:"ownerId,omitempty" graphql:"scalar,ID"`
	Description      string        `json:"description,omitempty" graphql:"scalar,String"`
	Organization     *Organization `json:"organization,omitempty" graphql:"object,Organization"`
	OrganizationId   string        `json:"organizationId,omitempty" graphql:"scalar,ID"`
	OrgSharing       bool          `json:"orgSharing,omitempty" graphql:"scalar,Boolean"`
	CreatedDateTime  string        `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string        `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	ProgramCount     int           `json:"programCount,omitempty" graphql:"scalar,Int"`
	ItemCount        int           `json:"itemCount,omitempty" graphql:"scalar,Int"`
	TypeId           string        `json:"typeId,omitempty" graphql:"scalar,ID"`
	IsActive         bool          `json:"isActive,omitempty" graphql:"scalar,Boolean"`
	Widgets          *WidgetList   `json:"widgets,omitempty" graphql:"object,WidgetList"`
}
type WidgetList struct {
	Records []Widget `json:"records,omitempty" graphql:"object,Widget"`
	Offset  int      `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int      `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int      `json:"count,omitempty" graphql:"scalar,Int"`
}
type CreateTDO struct {
	StartDateTime int    `json:"startDateTime,omitempty" graphql:"scalar,Int"`
	StopDateTime  int    `json:"stopDateTime,omitempty" graphql:"scalar,Int"`
	Source        string `json:"source,omitempty" graphql:"scalar,String"`
	MediaId       string `json:"mediaId,omitempty" graphql:"scalar,ID"`
	Status        string `json:"status,omitempty" graphql:"scalar,String"`
	ApplicationId string `json:"applicationId,omitempty" graphql:"scalar,ID"`
	Id            string `json:"id,omitempty" graphql:"scalar,ID"`
	Name          string `json:"name,omitempty" graphql:"scalar,String"`
	Description   string `json:"description,omitempty" graphql:"scalar,String"`
}
type StringProperty struct {
	Name  string `json:"name,omitempty" graphql:"scalar,String"`
	Value string `json:"value,omitempty" graphql:"scalar,String"`
}
type CompoundProperty struct {
	Name  string `json:"name,omitempty" graphql:"scalar,String"`
	Value *KVP   `json:"value,omitempty" graphql:"object,KVP"`
}
type JobList struct {
	Records []Job `json:"records,omitempty" graphql:"object,Job"`
	Offset  int   `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int   `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int   `json:"count,omitempty" graphql:"scalar,Int"`
}
type CreateApplication struct {
	Name                string           `json:"name,omitempty" graphql:"scalar,String"`
	Key                 string           `json:"key,omitempty" graphql:"scalar,String"`
	Category            string           `json:"category,omitempty" graphql:"scalar,String"`
	Description         string           `json:"description,omitempty" graphql:"scalar,String"`
	IconUrl             string           `json:"iconUrl,omitempty" graphql:"scalar,String"`
	IconSvg             string           `json:"iconSvg,omitempty" graphql:"scalar,String"`
	Url                 string           `json:"url,omitempty" graphql:"scalar,String"`
	Oauth2RedirectUrls  []string         `json:"oauth2RedirectUrls,omitempty" graphql:"scalar,String"`
	CheckPermissions    bool             `json:"checkPermissions,omitempty" graphql:"scalar,Boolean"`
	PermissionsRequired []string         `json:"permissionsRequired,omitempty" graphql:"scalar,String"`
	DeploymentModel     *DeploymentModel `json:"deploymentModel,omitempty" graphql:"enum,DeploymentModel"`
}
type Engine struct {
	Id                  string           `json:"id,omitempty" graphql:"scalar,ID"`
	OwnerOrganizationId string           `json:"ownerOrganizationId,omitempty" graphql:"scalar,ID"`
	IsPublic            bool             `json:"isPublic,omitempty" graphql:"scalar,Boolean"`
	LogoPath            string           `json:"logoPath,omitempty" graphql:"scalar,String"`
	Name                string           `json:"name,omitempty" graphql:"scalar,String"`
	Description         string           `json:"description,omitempty" graphql:"scalar,String"`
	CategoryId          string           `json:"categoryId,omitempty" graphql:"scalar,String"`
	State               *EngineState     `json:"state,omitempty" graphql:"enum,EngineState"`
	Price               int              `json:"price,omitempty" graphql:"scalar,Int"`
	Asset               string           `json:"asset,omitempty" graphql:"scalar,String"`
	DisplayName         string           `json:"displayName,omitempty" graphql:"scalar,String"`
	ValidateUri         string           `json:"validateUri,omitempty" graphql:"scalar,String"`
	ExecuteUri          string           `json:"executeUri,omitempty" graphql:"scalar,String"`
	ApplicationId       string           `json:"applicationId,omitempty" graphql:"scalar,ID"`
	CreatesRecording    bool             `json:"createsRecording,omitempty" graphql:"scalar,Boolean"`
	Website             string           `json:"website,omitempty" graphql:"scalar,String"`
	Rating              int              `json:"rating,omitempty" graphql:"scalar,Int"`
	CreatedDateTime     string           `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime    string           `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy           string           `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy          string           `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	DeploymentModel     *DeploymentModel `json:"deploymentModel,omitempty" graphql:"enum,DeploymentModel"`
	Tasks               *TaskList        `json:"tasks,omitempty" graphql:"object,TaskList"`
	Builds              *BuildList       `json:"builds,omitempty" graphql:"object,BuildList"`
}
type StructuredDataSchemaList struct {
	Records []StructuredJSONSchema `json:"records,omitempty" graphql:"object,StructuredJSONSchema"`
	Offset  int                    `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int                    `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int                    `json:"count,omitempty" graphql:"scalar,Int"`
}
type Watchlist struct {
	Id                string        `json:"id,omitempty" graphql:"scalar,ID"`
	Name              string        `json:"name,omitempty" graphql:"scalar,String"`
	Organization      *Organization `json:"organization,omitempty" graphql:"object,Organization"`
	OrganizationId    string        `json:"organizationId,omitempty" graphql:"scalar,ID"`
	WatchlistType     string        `json:"watchlistType,omitempty" graphql:"scalar,String"`
	MarketName        string        `json:"marketName,omitempty" graphql:"scalar,String"`
	TrackMyPrograms   string        `json:"trackMyPrograms,omitempty" graphql:"scalar,String"`
	TrackAll          string        `json:"trackAll,omitempty" graphql:"scalar,String"`
	AgencyId          string        `json:"agencyId,omitempty" graphql:"scalar,ID"`
	AdvertiserId      string        `json:"advertiserId,omitempty" graphql:"scalar,ID"`
	BrandId           string        `json:"brandId,omitempty" graphql:"scalar,ID"`
	CampaignId        string        `json:"campaignId,omitempty" graphql:"scalar,ID"`
	MarketId          string        `json:"marketId,omitempty" graphql:"scalar,ID"`
	Budget            string        `json:"budget,omitempty" graphql:"scalar,String"`
	MediaSourceTypeId string        `json:"mediaSourceTypeId,omitempty" graphql:"scalar,ID"`
	StartDate         string        `json:"startDate,omitempty" graphql:"scalar,String"`
	StopDate          string        `json:"stopDate,omitempty" graphql:"scalar,String"`
}
type CreateBuild struct {
	EngineId string `json:"engineId,omitempty" graphql:"scalar,ID"`
}
type CreateEntityIdentifierType struct {
	Label       string                    `json:"label,omitempty" graphql:"scalar,String"`
	LabelPlural string                    `json:"labelPlural,omitempty" graphql:"scalar,String"`
	IconClass   string                    `json:"iconClass,omitempty" graphql:"scalar,String"`
	Description string                    `json:"description,omitempty" graphql:"scalar,String"`
	DataType    *EntityIdentifierDataType `json:"dataType,omitempty" graphql:"enum,EntityIdentifierDataType"`
	Id          string                    `json:"id,omitempty" graphql:"scalar,ID"`
}
type CreateAsset struct {
	ContainerId string        `json:"containerId,omitempty" graphql:"scalar,ID"`
	ContentType string        `json:"contentType,omitempty" graphql:"scalar,String"`
	Description string        `json:"description,omitempty" graphql:"scalar,String"`
	File        *UploadedFile `json:"file,omitempty" graphql:"scalar,UploadedFile"`
	Md5Checksum string        `json:"md5Checksum,omitempty" graphql:"scalar,String"`
	AssetType   string        `json:"assetType,omitempty" graphql:"scalar,String"`
	Uri         string        `json:"uri,omitempty" graphql:"scalar,String"`
	Jsondata    *JSON         `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type CreateLibrary struct {
	Name           string `json:"name,omitempty" graphql:"scalar,String"`
	ApplicationId  string `json:"applicationId,omitempty" graphql:"scalar,ID"`
	OrganizationId string `json:"organizationId,omitempty" graphql:"scalar,ID"`
	LibraryTypeId  string `json:"libraryTypeId,omitempty" graphql:"scalar,ID"`
	CoverImageUrl  string `json:"coverImageUrl,omitempty" graphql:"scalar,String"`
	Description    string `json:"description,omitempty" graphql:"scalar,String"`
}
type UserList struct {
	Records []User `json:"records,omitempty" graphql:"object,User"`
	Offset  int    `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int    `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int    `json:"count,omitempty" graphql:"scalar,Int"`
}
type CreateIngestionConfiguration struct {
	ApplicationId string `json:"applicationId,omitempty" graphql:"scalar,ID"`
	Type          string `json:"type,omitempty" graphql:"scalar,String"`
	Name          string `json:"name,omitempty" graphql:"scalar,String"`
	Jsondata      *JSON  `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type StructuredJSONObject struct {
	Data   *JSON                 `json:"data,omitempty" graphql:"scalar,JSON"`
	Schema *StructuredJSONSchema `json:"schema,omitempty" graphql:"object,StructuredJSONSchema"`
	Name   string                `json:"name,omitempty" graphql:"scalar,String"`
	Id     string                `json:"id,omitempty" graphql:"scalar,ID"`
}
type DeletePayload struct {
	Id      string `json:"id,omitempty" graphql:"scalar,ID"`
	Message string `json:"message,omitempty" graphql:"scalar,String"`
}
type IngestionConfiguration struct {
	Id               string `json:"id,omitempty" graphql:"scalar,ID"`
	ApplicationId    string `json:"applicationId,omitempty" graphql:"scalar,ID"`
	Type             string `json:"type,omitempty" graphql:"scalar,String"`
	Name             string `json:"name,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	EmailAddress     string `json:"emailAddress,omitempty" graphql:"scalar,String"`
	Jsondata         *JSON  `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type UpdateEntityIdentifier struct {
	Id         string `json:"id,omitempty" graphql:"scalar,ID"`
	Title      string `json:"title,omitempty" graphql:"scalar,String"`
	IsPriority bool   `json:"isPriority,omitempty" graphql:"scalar,Boolean"`
	Url        string `json:"url,omitempty" graphql:"scalar,String"`
}
type UpdateLibrary struct {
	Id            string `json:"id,omitempty" graphql:"scalar,ID"`
	Name          string `json:"name,omitempty" graphql:"scalar,String"`
	CoverImageUrl string `json:"coverImageUrl,omitempty" graphql:"scalar,String"`
	Description   string `json:"description,omitempty" graphql:"scalar,String"`
	LibraryTypeId string `json:"libraryTypeId,omitempty" graphql:"scalar,ID"`
	Version       int    `json:"version,omitempty" graphql:"scalar,Int"`
}
type RequestClone struct {
	SourceApplicationId      string `json:"sourceApplicationId,omitempty" graphql:"scalar,ID"`
	DestinationApplicationId string `json:"destinationApplicationId,omitempty" graphql:"scalar,ID"`
	CloneBlobs               bool   `json:"cloneBlobs,omitempty" graphql:"scalar,Boolean"`
}
type Permission struct {
	Id          string `json:"id,omitempty" graphql:"scalar,ID"`
	Name        string `json:"name,omitempty" graphql:"scalar,String"`
	Description string `json:"description,omitempty" graphql:"scalar,String"`
}
type UpdateEngine struct {
	Id              string       `json:"id,omitempty" graphql:"scalar,ID"`
	IsPublic        bool         `json:"isPublic,omitempty" graphql:"scalar,Boolean"`
	Name            string       `json:"name,omitempty" graphql:"scalar,String"`
	Description     string       `json:"description,omitempty" graphql:"scalar,String"`
	CategoryId      string       `json:"categoryId,omitempty" graphql:"scalar,String"`
	DeploymentModel int          `json:"deploymentModel,omitempty" graphql:"scalar,Int"`
	Price           int          `json:"price,omitempty" graphql:"scalar,Int"`
	State           *EngineState `json:"state,omitempty" graphql:"enum,EngineState"`
}
type MentionRatingList struct {
	Records []MentionRating `json:"records,omitempty" graphql:"object,MentionRating"`
	Offset  int             `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int             `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int             `json:"count,omitempty" graphql:"scalar,Int"`
}
type TDOList struct {
	Records []TemporalDataObject `json:"records,omitempty" graphql:"object,TemporalDataObject"`
	Offset  int                  `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int                  `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int                  `json:"count,omitempty" graphql:"scalar,Int"`
}
type Widget struct {
	Id                     string        `json:"id,omitempty" graphql:"scalar,ID"`
	Name                   string        `json:"name,omitempty" graphql:"scalar,String"`
	Organization           *Organization `json:"organization,omitempty" graphql:"object,Organization"`
	OrganizationId         string        `json:"organizationId,omitempty" graphql:"scalar,ID"`
	Collection             *Collection   `json:"collection,omitempty" graphql:"object,Collection"`
	CollectionId           string        `json:"collectionId,omitempty" graphql:"scalar,ID"`
	DisplayCollectionName  bool          `json:"displayCollectionName,omitempty" graphql:"scalar,Boolean"`
	DisplayTranscription   bool          `json:"displayTranscription,omitempty" graphql:"scalar,Boolean"`
	Width                  int           `json:"width,omitempty" graphql:"scalar,Int"`
	NumberOfMentionsToShow int           `json:"numberOfMentionsToShow,omitempty" graphql:"scalar,Int"`
	AdScript               string        `json:"adScript,omitempty" graphql:"scalar,String"`
	SeoTags                []string      `json:"seoTags,omitempty" graphql:"scalar,String"`
	BackgroundColor        string        `json:"backgroundColor,omitempty" graphql:"scalar,String"`
	BorderColor            string        `json:"borderColor,omitempty" graphql:"scalar,String"`
	TextColor              string        `json:"textColor,omitempty" graphql:"scalar,String"`
	CreatedDateTime        string        `json:"createdDateTime,omitempty" graphql:"scalar,String"`
}
type Application struct {
	Id                  string             `json:"id,omitempty" graphql:"scalar,ID"`
	Key                 string             `json:"key,omitempty" graphql:"scalar,String"`
	Name                string             `json:"name,omitempty" graphql:"scalar,String"`
	Category            string             `json:"category,omitempty" graphql:"scalar,String"`
	Description         string             `json:"description,omitempty" graphql:"scalar,String"`
	IconUrl             string             `json:"iconUrl,omitempty" graphql:"scalar,String"`
	IconSvg             string             `json:"iconSvg,omitempty" graphql:"scalar,String"`
	Url                 string             `json:"url,omitempty" graphql:"scalar,String"`
	DeploymentModel     *DeploymentModel   `json:"deploymentModel,omitempty" graphql:"enum,DeploymentModel"`
	CreatedDateTime     string             `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime    string             `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	ClientSecret        string             `json:"clientSecret,omitempty" graphql:"scalar,String"`
	Oauth2RedirectUrls  []string           `json:"oauth2RedirectUrls,omitempty" graphql:"scalar,String"`
	OrganizationId      string             `json:"organizationId,omitempty" graphql:"scalar,ID"`
	Status              *ApplicationStatus `json:"status,omitempty" graphql:"enum,ApplicationStatus"`
	PermissionsRequired []string           `json:"permissionsRequired,omitempty" graphql:"scalar,String"`
}
type EntityType struct {
	Name       string `json:"name,omitempty" graphql:"scalar,String"`
	NamePlural string `json:"namePlural,omitempty" graphql:"scalar,String"`
	Schema     *JSON  `json:"schema,omitempty" graphql:"scalar,JSON"`
}
type EntityList struct {
	Offset  int      `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int      `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int      `json:"count,omitempty" graphql:"scalar,Int"`
	Records []Entity `json:"records,omitempty" graphql:"object,Entity"`
}
type CreateEntityType struct {
	Name       string `json:"name,omitempty" graphql:"scalar,String"`
	NamePlural string `json:"namePlural,omitempty" graphql:"scalar,String"`
	Schema     *JSON  `json:"schema,omitempty" graphql:"scalar,JSON"`
}
type UpdateEntity struct {
	Id              string `json:"id,omitempty" graphql:"scalar,ID"`
	Name            string `json:"name,omitempty" graphql:"scalar,String"`
	Description     string `json:"description,omitempty" graphql:"scalar,String"`
	ProfileImageUrl string `json:"profileImageUrl,omitempty" graphql:"scalar,String"`
}
type EngineList struct {
	Records []Engine `json:"records,omitempty" graphql:"object,Engine"`
	Count   int      `json:"count,omitempty" graphql:"scalar,Int"`
	Offset  int      `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int      `json:"limit,omitempty" graphql:"scalar,Int"`
}
type AssetList struct {
	Records []Asset `json:"records,omitempty" graphql:"object,Asset"`
	Offset  int     `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int     `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int     `json:"count,omitempty" graphql:"scalar,Int"`
}
type IntProperty struct {
	Name  string `json:"name,omitempty" graphql:"scalar,String"`
	Value int    `json:"value,omitempty" graphql:"scalar,Int"`
}
type FileData struct {
	Name     string `json:"name,omitempty" graphql:"scalar,String"`
	Size     int    `json:"size,omitempty" graphql:"scalar,Int"`
	MimeType string `json:"mimeType,omitempty" graphql:"scalar,String"`
	FileName string `json:"fileName,omitempty" graphql:"scalar,String"`
}
type BuildList struct {
	Records []Build `json:"records,omitempty" graphql:"object,Build"`
	Offset  int     `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int     `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int     `json:"count,omitempty" graphql:"scalar,Int"`
}
type BooleanProperty struct {
	Name  string `json:"name,omitempty" graphql:"scalar,String"`
	Value bool   `json:"value,omitempty" graphql:"scalar,Boolean"`
}
type CloneAssetIdMap struct {
	OldAssetId string `json:"oldAssetId,omitempty" graphql:"scalar,ID"`
	NewAssetId string `json:"newAssetId,omitempty" graphql:"scalar,ID"`
}
type Mention struct {
	DataObject *TemporalDataObject `json:"dataObject,omitempty" graphql:"object,TemporalDataObject"`
	Hits       []MentionHit        `json:"hits,omitempty" graphql:"object,MentionHit"`
	Context    []MentionContext    `json:"context,omitempty" graphql:"object,MentionContext"`
	Comments   *MentionCommentList `json:"comments,omitempty" graphql:"object,MentionCommentList"`
	Ratings    *MentionRatingList  `json:"ratings,omitempty" graphql:"object,MentionRatingList"`
}
type EngineResult struct {
	EngineId  string `json:"engineId,omitempty" graphql:"scalar,ID"`
	StartTime int    `json:"startTime,omitempty" graphql:"scalar,Int"`
	StopTime  int    `json:"stopTime,omitempty" graphql:"scalar,Int"`
	Text      string `json:"text,omitempty" graphql:"scalar,String"`
}
type MentionContext struct {
	AssetType     string         `json:"assetType,omitempty" graphql:"scalar,String"`
	EngineResults []EngineResult `json:"engineResults,omitempty" graphql:"object,EngineResult"`
}
type EngineBlacklist struct {
	OrganizationId   string           `json:"organizationId,omitempty" graphql:"scalar,ID"`
	Engines          []Engine         `json:"engines,omitempty" graphql:"object,Engine"`
	EngineCategories []EngineCategory `json:"engineCategories,omitempty" graphql:"object,EngineCategory"`
}
type CloneData struct {
	Date       string            `json:"date,omitempty" graphql:"scalar,String"`
	OriginalId string            `json:"originalId,omitempty" graphql:"scalar,String"`
	CloneBlobs bool              `json:"cloneBlobs,omitempty" graphql:"scalar,Boolean"`
	AssetIdMap []CloneAssetIdMap `json:"assetIdMap,omitempty" graphql:"object,CloneAssetIdMap"`
	Name       string            `json:"name,omitempty" graphql:"scalar,String"`
}
type MentionHit struct {
	AssetType     string         `json:"assetType,omitempty" graphql:"scalar,String"`
	EngineResults []EngineResult `json:"engineResults,omitempty" graphql:"object,EngineResult"`
}
type EntityIdentifierList struct {
	Records []EntityIdentifier `json:"records,omitempty" graphql:"object,EntityIdentifier"`
	Offset  int                `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int                `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int                `json:"count,omitempty" graphql:"scalar,Int"`
}
type Organization struct {
	Id               string                    `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string                    `json:"name,omitempty" graphql:"scalar,String"`
	Type             []string                  `json:"type,omitempty" graphql:"scalar,String"`
	Applications     *ApplicationList          `json:"applications,omitempty" graphql:"object,ApplicationList"`
	Jsondata         *JSON                     `json:"jsondata,omitempty" graphql:"scalar,JSON"`
	CreatedDateTime  string                    `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string                    `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	SeatLimit        int                       `json:"seatLimit,omitempty" graphql:"scalar,Int"`
	Status           *OrganizationStatus       `json:"status,omitempty" graphql:"enum,OrganizationStatus"`
	Roles            []Role                    `json:"roles,omitempty" graphql:"object,Role"`
	Users            *UserList                 `json:"users,omitempty" graphql:"object,UserList"`
	Blacklist        *EngineBlacklist          `json:"blacklist,omitempty" graphql:"object,EngineBlacklist"`
	Whitelist        *EngineWhitelist          `json:"whitelist,omitempty" graphql:"object,EngineWhitelist"`
	Schemas          *StructuredDataSchemaList `json:"schemas,omitempty" graphql:"object,StructuredDataSchemaList"`
	Watchlists       *WatchlistList            `json:"watchlists,omitempty" graphql:"object,WatchlistList"`
	Collections      *CollectionList           `json:"collections,omitempty" graphql:"object,CollectionList"`
	RootFolder       *Folder                   `json:"rootFolder,omitempty" graphql:"object,Folder"`
}
type Folder struct {
	Id               string        `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string        `json:"name,omitempty" graphql:"scalar,String"`
	Description      string        `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string        `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string        `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	OwnerId          string        `json:"ownerId,omitempty" graphql:"scalar,String"`
	Parent           *Folder       `json:"parent,omitempty" graphql:"object,Folder"`
	Subfolders       []Folder      `json:"subfolders,omitempty" graphql:"object,Folder"`
	Organization     *Organization `json:"organization,omitempty" graphql:"object,Organization"`
	OrganizationId   string        `json:"organizationId,omitempty" graphql:"scalar,ID"`
	MaxDepth         int           `json:"maxDepth,omitempty" graphql:"scalar,Int"`
	OrderIndex       int           `json:"orderIndex,omitempty" graphql:"scalar,Int"`
	Status           *FolderStatus `json:"status,omitempty" graphql:"enum,FolderStatus"`
}
type OrganizationList struct {
	Records []Organization `json:"records,omitempty" graphql:"object,Organization"`
	Offset  int            `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int            `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int            `json:"count,omitempty" graphql:"scalar,Int"`
}
type GroupList struct {
	Records []Group `json:"records,omitempty" graphql:"object,Group"`
	Offset  int     `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int     `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int     `json:"count,omitempty" graphql:"scalar,Int"`
}
type Job struct {
	Id               string    `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string    `json:"name,omitempty" graphql:"scalar,String"`
	Description      string    `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string    `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string    `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string    `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string    `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	TargetId         string    `json:"targetId,omitempty" graphql:"scalar,ID"`
	SourceAssetId    string    `json:"sourceAssetId,omitempty" graphql:"scalar,ID"`
	Tasks            *TaskList `json:"tasks,omitempty" graphql:"object,TaskList"`
	ApplicationId    string    `json:"applicationId,omitempty" graphql:"scalar,ID"`
}
type SearchInput struct {
	Offset int      `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit  int      `json:"limit,omitempty" graphql:"scalar,Int"`
	Index  []string `json:"index,omitempty" graphql:"scalar,String"`
	Query  *JSON    `json:"query,omitempty" graphql:"scalar,JSON"`
	Select *JSON    `json:"select,omitempty" graphql:"scalar,JSON"`
}
type TaskList struct {
	Records []Task `json:"records,omitempty" graphql:"object,Task"`
	Offset  int    `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int    `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int    `json:"count,omitempty" graphql:"scalar,Int"`
}
type CloneRequestList struct {
	Records []CloneRequest `json:"records,omitempty" graphql:"object,CloneRequest"`
	Count   int            `json:"count,omitempty" graphql:"scalar,Int"`
	Offset  int            `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int            `json:"limit,omitempty" graphql:"scalar,Int"`
}
type Entity struct {
	Id               string                `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string                `json:"name,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string                `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string                `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string                `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string                `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	Properties       []Property            `json:"properties,omitempty" graphql:"interface,Property"`
	LibraryId        string                `json:"libraryId,omitempty" graphql:"scalar,ID"`
	ProfileImageUrl  string                `json:"profileImageUrl,omitempty" graphql:"scalar,String"`
	Identifiers      *EntityIdentifierList `json:"identifiers,omitempty" graphql:"object,EntityIdentifierList"`
	IsPublished      bool                  `json:"isPublished,omitempty" graphql:"scalar,Boolean"`
	Jsondata         *JSON                 `json:"jsondata,omitempty" graphql:"scalar,JSON"`
}
type UpdateTask struct {
	Id         string `json:"id,omitempty" graphql:"scalar,ID"`
	Status     string `json:"status,omitempty" graphql:"scalar,String"`
	JobId      string `json:"jobId,omitempty" graphql:"scalar,ID"`
	TaskOutput string `json:"taskOutput,omitempty" graphql:"scalar,String"`
}
type CreateTask struct {
	TaskType string `json:"taskType,omitempty" graphql:"scalar,String"`
}
type EngineCategory struct {
	Id               string   `json:"id,omitempty" graphql:"scalar,ID"`
	Name             string   `json:"name,omitempty" graphql:"scalar,String"`
	Description      string   `json:"description,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string   `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string   `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	CreatedBy        string   `json:"createdBy,omitempty" graphql:"scalar,String"`
	ModifiedBy       string   `json:"modifiedBy,omitempty" graphql:"scalar,String"`
	EngineIds        []string `json:"engineIds,omitempty" graphql:"scalar,ID"`
	TotalEngines     int      `json:"totalEngines,omitempty" graphql:"scalar,Int"`
	IconClass        string   `json:"iconClass,omitempty" graphql:"scalar,String"`
	Editable         bool     `json:"editable,omitempty" graphql:"scalar,Boolean"`
	VideoOnly        bool     `json:"videoOnly,omitempty" graphql:"scalar,Boolean"`
}
type PermissionList struct {
	Records []Permission `json:"records,omitempty" graphql:"object,Permission"`
	Offset  int          `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int          `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int          `json:"count,omitempty" graphql:"scalar,Int"`
}
type UpdateLibraryType struct {
	Id                      string            `json:"id,omitempty" graphql:"scalar,ID"`
	Label                   string            `json:"label,omitempty" graphql:"scalar,String"`
	IconClass               string            `json:"iconClass,omitempty" graphql:"scalar,String"`
	EntityIdentifierTypeIds []string          `json:"entityIdentifierTypeIds,omitempty" graphql:"scalar,ID"`
	EntityType              *UpdateEntityType `json:"entityType,omitempty" graphql:"input_object,UpdateEntityType"`
}
type CreateEntity struct {
	Name            string `json:"name,omitempty" graphql:"scalar,String"`
	Description     string `json:"description,omitempty" graphql:"scalar,String"`
	LibraryId       string `json:"libraryId,omitempty" graphql:"scalar,ID"`
	ProfileImageUrl string `json:"profileImageUrl,omitempty" graphql:"scalar,String"`
	Jsondata        *JSON  `json:"jsondata,omitempty" graphql:"scalar,JSON"`
	IsPublished     bool   `json:"isPublished,omitempty" graphql:"scalar,Boolean"`
}
type LibraryCollaborator struct {
	OrganizationId   string        `json:"organizationId,omitempty" graphql:"scalar,ID"`
	Organization     *Organization `json:"organization,omitempty" graphql:"object,Organization"`
	Status           string        `json:"status,omitempty" graphql:"scalar,String"`
	CreatedDateTime  string        `json:"createdDateTime,omitempty" graphql:"scalar,String"`
	ModifiedDateTime string        `json:"modifiedDateTime,omitempty" graphql:"scalar,String"`
	Permissions      []string      `json:"permissions,omitempty" graphql:"scalar,String"`
	LibraryId        string        `json:"libraryId,omitempty" graphql:"scalar,ID"`
	Library          *Library      `json:"library,omitempty" graphql:"object,Library"`
}
type WatchlistList struct {
	Records []Watchlist `json:"records,omitempty" graphql:"object,Watchlist"`
	Offset  int         `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int         `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int         `json:"count,omitempty" graphql:"scalar,Int"`
}
type CollectionList struct {
	Records []Collection `json:"records,omitempty" graphql:"object,Collection"`
	Offset  int          `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit   int          `json:"limit,omitempty" graphql:"scalar,Int"`
	Count   int          `json:"count,omitempty" graphql:"scalar,Int"`
}
type CreateJob struct {
	Status   string       `json:"status,omitempty" graphql:"scalar,String"`
	TargetId string       `json:"targetId,omitempty" graphql:"scalar,ID"`
	Tasks    []CreateTask `json:"tasks,omitempty" graphql:"input_object,CreateTask"`
	Retries  int          `json:"retries,omitempty" graphql:"scalar,Int"`
}

