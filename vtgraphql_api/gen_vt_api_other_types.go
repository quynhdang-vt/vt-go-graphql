
// GENERATED by vt-go-graphql 2017-09-28 23:33:00.824154026 -0700 PDT
// ENUM, INTERFACE, SCALAR...
package vtgraphql_api


// ENUM BuildUpdateAction
type BuildUpdateAction string

const BuildUpdateAction_deploy BuildUpdateAction = "deploy"
const BuildUpdateAction_pause BuildUpdateAction = "pause"
const BuildUpdateAction_unpause BuildUpdateAction = "unpause"
const BuildUpdateAction_approve BuildUpdateAction = "approve"
const BuildUpdateAction_disapprove BuildUpdateAction = "disapprove"
const BuildUpdateAction_invalidate BuildUpdateAction = "invalidate"
const BuildUpdateAction_submit BuildUpdateAction = "submit"

// END of ENUM BuildUpdateAction

// SCALAR Boolean-->bool
type Boolean bool

// INTERFACE Page
type Page struct {
	Offset int `json:"offset,omitempty" graphql:"scalar,Int"`
	Limit  int `json:"limit,omitempty" graphql:"scalar,Int"`
	Count  int `json:"count,omitempty" graphql:"scalar,Int"`
}

func (t TDOList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t AssetList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t TaskList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t CloneRequestList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t EngineList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t BuildList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t JobList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t EntityIdentifierTypeList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t LibraryTypeList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t LibraryList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t LibraryEngineModelList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t EntityList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t EntityIdentifierList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t ApplicationList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t PermissionList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t UserList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t StructuredDataSchemaList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t WatchlistList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t CollectionList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t WidgetList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t OrganizationList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t GroupList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t IngestionConfigurationList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t MentionCommentList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t MentionRatingList) GetGraphQLInterfaceName() string {
	return "Page"
}

func (t Page) GetAllGraphQLImplementedTypes() string {
	return "TDOList,AssetList,TaskList,CloneRequestList,EngineList,BuildList,JobList,EntityIdentifierTypeList,LibraryTypeList,LibraryList,LibraryEngineModelList,EntityList,EntityIdentifierList,ApplicationList,PermissionList,UserList,StructuredDataSchemaList,WatchlistList,CollectionList,WidgetList,OrganizationList,GroupList,IngestionConfigurationList,MentionCommentList,MentionRatingList"
}

// END of INTERFACE Page
// INTERFACE Property
type Property struct {
	Name string `json:"name,omitempty" graphql:"scalar,String"`
}

func (t IntProperty) GetGraphQLInterfaceName() string {
	return "Property"
}

func (t StringProperty) GetGraphQLInterfaceName() string {
	return "Property"
}

func (t BooleanProperty) GetGraphQLInterfaceName() string {
	return "Property"
}

func (t CompoundProperty) GetGraphQLInterfaceName() string {
	return "Property"
}

func (t Property) GetAllGraphQLImplementedTypes() string {
	return "IntProperty,StringProperty,BooleanProperty,CompoundProperty"
}

// END of INTERFACE Property
// SCALAR DateTime-->interface{}
type DateTime interface{}

// INTERFACE Metadata
type Metadata struct {
	Name string `json:"name,omitempty" graphql:"scalar,String"`
}

func (t KVP) GetGraphQLInterfaceName() string {
	return "Metadata"
}

func (t CloneData) GetGraphQLInterfaceName() string {
	return "Metadata"
}

func (t Program) GetGraphQLInterfaceName() string {
	return "Metadata"
}

func (t FileData) GetGraphQLInterfaceName() string {
	return "Metadata"
}

func (t StructuredJSONObject) GetGraphQLInterfaceName() string {
	return "Metadata"
}

func (t JSONObject) GetGraphQLInterfaceName() string {
	return "Metadata"
}

func (t Metadata) GetAllGraphQLImplementedTypes() string {
	return "KVP,CloneData,Program,FileData,StructuredJSONObject,JSONObject"
}

// END of INTERFACE Metadata
// SCALAR Int-->int
type Int int

// SCALAR JSON-->map[string]interface{}
type JSON map[string]interface{}

// ENUM DeploymentModel
type DeploymentModel string

const DeploymentModel_FullyNetworkIsolated DeploymentModel = "FullyNetworkIsolated"
const DeploymentModel_MostlyNetworkIsolated DeploymentModel = "MostlyNetworkIsolated"
const DeploymentModel_NonNetworkIsolated DeploymentModel = "NonNetworkIsolated"
const DeploymentModel_HumanReview DeploymentModel = "HumanReview"

// END of ENUM DeploymentModel

// ENUM OrganizationStatus
type OrganizationStatus string

const OrganizationStatus_active OrganizationStatus = "active"
const OrganizationStatus_deleted OrganizationStatus = "deleted"

// END of ENUM OrganizationStatus

// ENUM FolderStatus
type FolderStatus string

const FolderStatus_active FolderStatus = "active"
const FolderStatus_inactive FolderStatus = "inactive"

// END of ENUM FolderStatus

// ENUM ApplicationStatus
type ApplicationStatus string

const ApplicationStatus_active ApplicationStatus = "active"
const ApplicationStatus_draft ApplicationStatus = "draft"
const ApplicationStatus_deleted ApplicationStatus = "deleted"
const ApplicationStatus_pending ApplicationStatus = "pending"
const ApplicationStatus_rejected ApplicationStatus = "rejected"
const ApplicationStatus_approved ApplicationStatus = "approved"
const ApplicationStatus_disabled ApplicationStatus = "disabled"

// END of ENUM ApplicationStatus

// SCALAR ID-->string
type ID string

// SCALAR String-->string
type String string

// ENUM EntityIdentifierDataType
type EntityIdentifierDataType string

const EntityIdentifierDataType_image EntityIdentifierDataType = "image"
const EntityIdentifierDataType_audio EntityIdentifierDataType = "audio"
const EntityIdentifierDataType_video EntityIdentifierDataType = "video"
const EntityIdentifierDataType_text EntityIdentifierDataType = "text"

// END of ENUM EntityIdentifierDataType

// ENUM EngineState
type EngineState string

const EngineState_active EngineState = "active"
const EngineState_disabled EngineState = "disabled"
const EngineState_pending EngineState = "pending"
const EngineState_deleted EngineState = "deleted"
const EngineState_draft EngineState = "draft"
const EngineState_ready EngineState = "ready"

// END of ENUM EngineState

// ENUM ApplicationWorkflowAction
type ApplicationWorkflowAction string

const ApplicationWorkflowAction_submit ApplicationWorkflowAction = "submit"
const ApplicationWorkflowAction_approve ApplicationWorkflowAction = "approve"
const ApplicationWorkflowAction_reject ApplicationWorkflowAction = "reject"
const ApplicationWorkflowAction_deploy ApplicationWorkflowAction = "deploy"
const ApplicationWorkflowAction_disable ApplicationWorkflowAction = "disable"
const ApplicationWorkflowAction_undelete ApplicationWorkflowAction = "undelete"

// END of ENUM ApplicationWorkflowAction

// ENUM RootFolderType
type RootFolderType string

const RootFolderType_watchlist RootFolderType = "watchlist"
const RootFolderType_collection RootFolderType = "collection"
const RootFolderType_cms RootFolderType = "cms"

// END of ENUM RootFolderType

// SCALAR UploadedFile-->interface{}
type UploadedFile interface{}

// ENUM TaskStatus
type TaskStatus string

const TaskStatus_pending TaskStatus = "pending"
const TaskStatus_running TaskStatus = "running"
const TaskStatus_complete TaskStatus = "complete"
const TaskStatus_queued TaskStatus = "queued"
const TaskStatus_accepted TaskStatus = "accepted"
const TaskStatus_failed TaskStatus = "failed"
const TaskStatus_cancelled TaskStatus = "cancelled"

// END of ENUM TaskStatus


